c
json.(tag, :name )
tag
c
            @restaurant.menu_items.last.tags
            @restaurant.menu_items
            @restaurant = Restaurant.includes(menu_items: {menu_item_tags: :tag}).find(params[:id])
@restaurant.menu_item
@restaurant.menu_items
@restaurant = Restaurant.joins(menu_items: {menu_item_tags: :tag}).where(id: params[:id])
            @restaurant = Restaurant.includes(menu_items: {menu_item_tags: :tag}).where(id: params[:id])
Restaurant.last.menu_items
@restaurant.menu_items
@restaurant.menu_tags
            @restaurant = Restaurant.includes(menu_items: {menu_item_tags: :tag}).where(id: params[:id])
@restaurant = Restaurant.includes(menu_items: {menu_item_tags: :tag}).where(menu_items: {id: params[:id]})
c
exit
r
r = Restaurant.includes(menu_items: {menu_item_tags: :tag}).where(menu_items: {id: 25})
c
            expect(JSON.parse(response.body)).to eq ({'restaurants' => restaurants_arr, 'next' => next_url})
            expect(restaurants_arr.length).to eq ENV['RESTAURANT_PAGINATION_SIZE'].to_i
            expect(response).to have_http_status(200)
            next_url = request.host + '/api/restaurants?api_key=' + api_key.guid + '&page=2'
request.host
request
body
self
self.class
instance_variables
public_methods - Object.methods
methods false
methods true
methods
url
host
request.headers["Host"]
exit
headers["Host"] + '/api/restaurants?api_key=' + @api_key.guid + '&page=' + @page_index.to_s
c
@next = headers["Host"] + '/api/restaurants?api_key=' + @api_key.guid + '&page=' + @page_index.to_s
@page_index
@next = headers["Host"] + '/api/restaurants?api_key=' + @api_key.guid + '&page=' 
@api_key.guid
@api_key
@next = headers["Host"] + '/api/restaurants?api_key=' + @api_key.guid + '&page=' + @page_index
@next = headers["Host"] + '/api/restaurants?api_key=' + @api_key + '&page=' + @page_index
c
exit
headers["Host"]
params
controllers
headers
self
request
route
routes
reoute
header
public_methods - Object.methods
public_methods
methods false
methods
keys
.keys
headers
self
request.class
request
request["HTTP_HOST"]
headers["HTTP_HOST"]
headers["Host"]
headers
headers.host
header.host
Host
request.keys
request
request.url
request.host
restaurants_url
restaurants_path
c
Restaurant.order(:id).limit(@remainder_size).offset(ENV['RESTAURANT_PAGINATION_SIZE'].to_i)
c
ENV['RESTAURANT_PAGINATION_SIZE'].to_i + @remainder_size
ENV['RESTAURANT_PAGINATION_SIZE'].to_i
c
ENV['RESTAURANT_PAGINATION_SIZE'].to_f
ENV['RESTAURANT_PAGINATION_SIZE']
        debugger
c
exit
ENV
exit
Rails.env
Rails.application.env
Rails.application.secrets
ENV['MENU_ITEM_PAGINATION_SIZE']
ENV['RESTAURANT_PAGINATION_SIZE']
ENV
exit
params[:page].blank?
c
restaurants_arr.length
c
@restaurants = Restaurant.order(:id).limit(@limit).offset(@RESTAURANT_PAGINATION_SIZE * @page_index).size
@restaurants = Restaurant.order(:id).limit(@limit).offset(@RESTAURANT_PAGINATION_SIZE * @page_index)
@limit = @RESTAURANT_PAGINATION_SIZE
@page_index = params[:page] - 1
(params[:page] - 1) > @last_possible_page_index
params[:page].blank? || params[:page] < 0
c
@page
@RESTAURANT_PAGINATION_SIZE
@restaurants = Restaurant.order(:id).limit(@limit).offset(@RESTAURANT_PAGINATION_SIZE * @page_index).count
@restaurants = Restaurant.order(:id).limit(@limit).offset(@RESTAURANT_PAGINATION_SIZE * @page_index)
c
JSON.parse(response.body)
c
Restaurant.count
@last_possible_page_index
@page_index == 0
@page_index >= @last_possible_page_index
@limit = Restaurant.count % @RESTAURANT_PAGINATION_SIZE
@page_index = @last_possible_page_index
@page_index
c
JSON.parse(response.body)
              expect(restaurants_arr.length).to eq @remainder_size
response.status
response
restaurants_arr
c
              end
                json
                json['rating'] = r.rating.to_s
                json = JSON.parse(r.to_json).slice('id' , 'name', 'description', 'rating', 'address')
              restaurants_arr = Restaurant.order(:id).limit(@remainder_size).offset(@RESTAURANT_PAGINATION_SIZE).map do |r|
              end
                json
                json['rating'] = r.rating.to_s
                json = JSON.parse(r.to_json).slice('id' , 'name', 'description', 'rating', 'address')
              restaurants_arr = Restaurant.order(:id).limit(@remainder_size).offset(@RESTAURANT_PAGINATION_SIZE).map do |r|
Restaurant.order(:id).ids
c
Restaurant.count
c
ApiKey.find_by_guid( api_key)
c
ApiKey.find_by(guid: api_key)
c
cc
c
ApiKey.find_by(guid: api_key)
c
Restaurant.order(:id).limit(@limit).offset(@RESTAURANT_PAGINATION_SIZE * (@page - 1) )
c
@RESTAURANT_PAGINATION_SIZE * @page
 @restaurants = Restaurant.order(:id).limit(@limit).offset(@RESTAURANT_PAGINATION_SIZE * @page)
   44:
@RESTAURANT_PAGINATION_SIZE * @page)
@limit
c
@limit
c
JSON.parse(response.body)['restaurants'].size
JSON.parse(response.body)['restaurants']
JSON.parse(response.body)
c
@page
@RESTAURANT_PAGINATION_SIZE
@RESTAURANT_PAGINATION_SIZE * @page
c
@RESTAURANT_PAGINATION_SIZE * @page
c
@page
@RESTAURANT_PAGINATION_SIZE * @page
@limit
Restaurant.count
Restaurant.size
Restaurant.order(:id).limit(@limit).offset(@RESTAURANT_PAGINATION_SIZE * @page)
params
c
restaurants_arr.length
response.body
c
              # JSON.parse(response.body).length
c
JSON.parse(response.body)['restaurants'].length
JSON.parse(response.body)
JSON.parse(response.body).map{|a| puts a}
JSON.parse(response.body).map{|a| puts a['id']}
restaurants_arr.map{|a| puts a['id']}
restaurants_arr.map{|a| puts a}
restaurants_arr.map{|a| a.id}
restaurants_arr.map(&:id)
restaurants_arr
restaurants_arr.ids
c
JSON.parse(response.body).length
restaurants_arr.length
c
Restaurant.order(:id).limit(@RESTAURANT_PAGINATION_SIZE).offset(@RESTAURANT_PAGINATION_SIZE)
Restaurant.order(:id).offset(@RESTAURANT_PAGINATION_SIZE).limit(@RESTAURANT_PAGINATION_SIZE).ids
Restaurant.order(:id).offset(@RESTAURANT_PAGINATION_SIZE).limit(@RESTAURANT_PAGINATION_SIZE)
c
restaurants_arr.length
restaurants_arr.first
restaurants_arr
c
Restaurant.count
c
            JSON.parse(r.to_json).slice('id' , 'name', 'description', 'rating', 'address')
JSON.parse(r.to_json).slice(:id , :name, :description, :rating, :address)
JSON.parse(r.to_json)
JSON.parse(r)
r.to_s
r.to_hash
r.to_json
r
c
restaurants_arr
c
JSON.parse(body)['restaurants']
JSON.parse(body).restaurants
JSON.parse(body)
body
JSON.parse(response.body)
response.body.to_json
response.body
response
c
restaurant
json
@restaurants
restaurant
 restaurant
c
@restaurants
c
@restaurants = Restaurant.order(:id).limit(@RESTAURANT_PAGINATION_SIZE).offset(@RESTAURANT_PAGINATION_SIZE * @page)
@RESTAURANT_PAGINATION_SIZE
@page
c
@restaurants
c
end
  json.(:id , :name, :description, :rating, :address)
json.restaurants @restaurants do
c
Rails.application.routes.methods true
Rails.application.routes.methods false
Rails.application.routes
  include Rails.application.routes.url_helpers
