exit
params
id
declared(params)
declared(params)[:id]
@restaurant = Restaurant.includes(menu_items: {menu_item_tags: :tag}).find_by(id: declared(params)[:id])
authorize declared(params)[:api_key]
exit
            authorize declared(params)[:api_key]
declared(params)[:api_key]
declared(params)['api_key']
declared(params)
c
i
c
i
c
(index + 2) % num
c
(index + 2) % num
c
(index + 2) % num
exit
(index + 1) % num
(index + 1) % nu
exit
c
(index + 1) % num
c
(index + 1) % num
c
(index + 1) % num
c
(index + 1) % num
c
(index + 1) % num
c
exit
c
index
c
expected_response.merge(menu_item.slice(:id, :name, :description, :menu_category))
c
@restaurant.menu_items.size
@restaurant.menu_items
expected_response
c
@page_index
c
@mi
c
              menu_item_attrs = @restaurant.menu_items.pluck(:name, :description, :menu_category).first
menu_item_attrs
@mit_2.tag.name
@mit_1.tag.name
c
menu_item_attrs << @mit.tag.name
@mit.tag.name
@mit.tag
@mit.tag.map(&:name)
@mit.tag
c
@mit.tag
mit.tag
c
JSON.parse(response.body)
c
menu_item_attrs = @restaurant.menu_items.pluck(:name, :description, :menu_category).first
menu_item_attrs = @restaurant.menu_items.pluck(:name, :description, :menu_category).flatten
menu_item_attrs = @restaurant.menu_items.pluck(:name, :description, :menu_category)
menu_item_attrs = @restaurant.menu_items.map{ |mi| mi.name}
menu_item_attrs = @restaurant.menu_items.first.map{ |mi| mi.name)
menu_item_attrs = @restaurant.menu_items.first
menu_item_attrs = @restaurant.menu_items.first.pluck(:name)
menu_item_attrs = @restaurant.menu_items.first.pluck(:name, :description, :menu_category)
@restaurant.menu_items.first
c
              @restaurant = mit.menu_item.restaurant
mit.menu_item.restaurant
mit.menu_item
mit
c
params[:id]
c
exit
c
JSON.parse(response.body)
response
c
json.(tag, :name )
tag
c
            @restaurant.menu_items.last.tags
            @restaurant.menu_items
            @restaurant = Restaurant.includes(menu_items: {menu_item_tags: :tag}).find(params[:id])
@restaurant.menu_item
@restaurant.menu_items
@restaurant = Restaurant.joins(menu_items: {menu_item_tags: :tag}).where(id: params[:id])
            @restaurant = Restaurant.includes(menu_items: {menu_item_tags: :tag}).where(id: params[:id])
Restaurant.last.menu_items
@restaurant.menu_items
@restaurant.menu_tags
            @restaurant = Restaurant.includes(menu_items: {menu_item_tags: :tag}).where(id: params[:id])
@restaurant = Restaurant.includes(menu_items: {menu_item_tags: :tag}).where(menu_items: {id: params[:id]})
c
exit
r
r = Restaurant.includes(menu_items: {menu_item_tags: :tag}).where(menu_items: {id: 25})
c
            expect(JSON.parse(response.body)).to eq ({'restaurants' => restaurants_arr, 'next' => next_url})
            expect(restaurants_arr.length).to eq ENV['RESTAURANT_PAGINATION_SIZE'].to_i
            expect(response).to have_http_status(200)
            next_url = request.host + '/api/restaurants?api_key=' + api_key.guid + '&page=2'
request.host
request
body
self
self.class
instance_variables
public_methods - Object.methods
methods false
methods true
methods
url
host
request.headers["Host"]
exit
headers["Host"] + '/api/restaurants?api_key=' + @api_key.guid + '&page=' + @page_index.to_s
c
@next = headers["Host"] + '/api/restaurants?api_key=' + @api_key.guid + '&page=' + @page_index.to_s
@page_index
@next = headers["Host"] + '/api/restaurants?api_key=' + @api_key.guid + '&page=' 
@api_key.guid
@api_key
@next = headers["Host"] + '/api/restaurants?api_key=' + @api_key.guid + '&page=' + @page_index
@next = headers["Host"] + '/api/restaurants?api_key=' + @api_key + '&page=' + @page_index
c
exit
headers["Host"]
params
controllers
headers
self
request
route
routes
reoute
header
public_methods - Object.methods
public_methods
methods false
methods
keys
.keys
headers
self
request.class
request
request["HTTP_HOST"]
headers["HTTP_HOST"]
headers["Host"]
headers
headers.host
header.host
Host
request.keys
request
request.url
request.host
restaurants_url
restaurants_path
c
Restaurant.order(:id).limit(@remainder_size).offset(ENV['RESTAURANT_PAGINATION_SIZE'].to_i)
c
ENV['RESTAURANT_PAGINATION_SIZE'].to_i + @remainder_size
ENV['RESTAURANT_PAGINATION_SIZE'].to_i
c
ENV['RESTAURANT_PAGINATION_SIZE'].to_f
ENV['RESTAURANT_PAGINATION_SIZE']
        debugger
c
exit
ENV
exit
Rails.env
Rails.application.env
Rails.application.secrets
ENV['MENU_ITEM_PAGINATION_SIZE']
ENV['RESTAURANT_PAGINATION_SIZE']
ENV
exit
params[:page].blank?
c
restaurants_arr.length
c
@restaurants = Restaurant.order(:id).limit(@limit).offset(@RESTAURANT_PAGINATION_SIZE * @page_index).size
@restaurants = Restaurant.order(:id).limit(@limit).offset(@RESTAURANT_PAGINATION_SIZE * @page_index)
@limit = @RESTAURANT_PAGINATION_SIZE
@page_index = params[:page] - 1
(params[:page] - 1) > @last_possible_page_index
params[:page].blank? || params[:page] < 0
c
@page
@RESTAURANT_PAGINATION_SIZE
@restaurants = Restaurant.order(:id).limit(@limit).offset(@RESTAURANT_PAGINATION_SIZE * @page_index).count
@restaurants = Restaurant.order(:id).limit(@limit).offset(@RESTAURANT_PAGINATION_SIZE * @page_index)
c
JSON.parse(response.body)
c
Restaurant.count
@last_possible_page_index
@page_index == 0
@page_index >= @last_possible_page_index
@limit = Restaurant.count % @RESTAURANT_PAGINATION_SIZE
@page_index = @last_possible_page_index
@page_index
c
JSON.parse(response.body)
              expect(restaurants_arr.length).to eq @remainder_size
response.status
response
restaurants_arr
c
              end
                json
                json['rating'] = r.rating.to_s
                json = JSON.parse(r.to_json).slice('id' , 'name', 'description', 'rating', 'address')
              restaurants_arr = Restaurant.order(:id).limit(@remainder_size).offset(@RESTAURANT_PAGINATION_SIZE).map do |r|
              end
                json
                json['rating'] = r.rating.to_s
                json = JSON.parse(r.to_json).slice('id' , 'name', 'description', 'rating', 'address')
              restaurants_arr = Restaurant.order(:id).limit(@remainder_size).offset(@RESTAURANT_PAGINATION_SIZE).map do |r|
Restaurant.order(:id).ids
c
Restaurant.count
c
ApiKey.find_by_guid( api_key)
c
ApiKey.find_by(guid: api_key)
c
cc
c
ApiKey.find_by(guid: api_key)
c
Restaurant.order(:id).limit(@limit).offset(@RESTAURANT_PAGINATION_SIZE * (@page - 1) )
c
@RESTAURANT_PAGINATION_SIZE * @page
 @restaurants = Restaurant.order(:id).limit(@limit).offset(@RESTAURANT_PAGINATION_SIZE * @page)
   44:
@RESTAURANT_PAGINATION_SIZE * @page)
@limit
c
@limit
c
JSON.parse(response.body)['restaurants'].size
